h1. bnd4sbt

bnd4sbt is a "BND":http://www.aqute.biz/Code/Bnd plug-in for "SBT":http://code.google.com/p/simple-build-tool: It enables you to create "OSGi":http://www.osgi.org bundles for your SBT projects.

bnd4sbt is open source software licensed under the "Apache 2.0 License":http://www.apache.org/licenses/LICENSE-2.0.html. Just use it!

h2. Getting bnd4sbt

The latest releases of bnd4sbt are deployed to the "Scala-Tools.org Maven repository":http://scala-tools.org/repo-releases/com/weiglewilczek/bnd4sbt/. As this is available from every SBT project, you only have to add bnd4sbt as a plug-in to your project (see below).

If you want to go for a nightly version, you can get it from here and build it yourself using SBT:

<pre>
git clone git://github.com/weiglewilczek/bnd4sbt.git
cd bnd4sbt
sbt publish-local
</pre>

h2. Adding bnd4sbt as a plug-in to your project

Just add the following lines to your _project/plugins/Plugins.scala_ file:

<pre>
// Repositories: Using module configs to speed up resolution => Repos must be defs!
def aquteRepo = "aQute Maven Repository" at "http://www.aqute.biz/repo"
lazy val aquteModuleConfig = ModuleConfiguration("biz.aQute", aquteRepo)

// Dependencies
lazy val bnd4sbt = "com.weiglewilczek.bnd4sbt" % "bnd4sbt" % "1.0.0"
</pre>

If you don't already have such a file, you can take it from here:

<pre>
class Plugins(info: ProjectInfo) extends PluginDefinition(info) {
  lazy val bnd4sbt = "com.weiglewilczek.bnd4sbt" % "bnd4sbt" % "1.0.0"
}
</pre>

h2. Using bnd4sbt

Mix the _com.weiglewilczek.bnd4sbt.BNDPlugin_ trait into your project definition.

<pre>
class MyProject(info: ProjectInfo) extends DefaultProject(info) with BNDPlugin
</pre>

Now you can use the _bndBundle_ action to create an OGSi bundle for your project. bnd4sbt also overrides the _package_ action such that an OSGi bundle is created.

bnd4sbt offers some properties to customize the way BND will create a bundle from your project. All properties have got (hopefully) sensible defaults, e.g. the _Bundle-Version_ will be the version of your project. Currently these properties are available:

* _bndBundleSymbolicName_: The value for <code>Bundle-SymbolicName</code>. Defaults to <i>projectOrganization.projectName</i> with duplicate subsequences removed, e.g. "a.b.c" + "c-d" => "a.b.c.d". Recognized namespace separators are "." and "-".
* _bndBundleName_: The value for <code>Bundle-Name</code>. Defaults to <code>bndBundleSymbolicName</code>.
* _bndBundleVersion_: The value for <code>Bundle-Version</code>. Defaults to this project's version.
* _bndFragmentHost_: The value for <code>Fragment-Host</code>, wrapped in an <code>Option</code>. Defaults to <code>None</code>, i.e. no fragment is defined.
* _bndBundleVendor_: The value for <code>Bundle-Vendor</code>, wrapped in an <code>Option</code>. Defaults to <code>None</code>, i.e. no vendor is defined.
* _bndBundleLicense_: The value for <code>Bundle-License</code>, wrapped in an <code>Option</code>. Defaults to <code>None</code>, i.e. no license is defined.
* _bndExecutionEnvironment_: The value for <code>Bundle-RequiredExecutionEnvironment</code>. Defaults to empty <code>Set</code>, i.e. no execution environments are defined.
* _bndPrivatePackage_: The value for <code>Private-Package</code>. Defaults to <code>"%s.*".format(bndBundleSymbolicName) :: Nil</code>, i.e. contains the root package and all subpackages of this project.
* _bndExportPackage_: The value for <code>Export-Package</code>. Defaults to empty <code>Seq</code>, i.e. nothing is exported.
* _bndImportPackage_: The value for <code>Import-Package</code>. Defaults to <code>""scala.*;version=[%1$s,%1$s]".format(project.buildScalaVersion) ::  "*" :: Nil</code>, i.e. Scala is imported only in the exact version which is used to build this project.
* _bndDynamicImportPackage_: The value for <code>Dynamic-ImportPackage</code>. Defaults to empty <code>Seq</code>, i.e. nothing is imported dynamically.
_bndRequireBundle_ : The value for <code>Require-Bundle</code>. Defaults to empty <code>Seq</code>, i.e. no bundles are required.
* _bndBundleActivator_: The value for <code>Bundle-Actiavtor</code>, wrapped in an <code>Option</code>. Defaults to <code>None</code>, i.e. no activator is defined.
* _bndIncludeResource_: The value for <code>Include-Resource</code>. Defaults to the main resources of this project.
* _bndEmbedDependencies_: Should the dependencies be embedded? Defaults to <code>false</code>.
* _bndVersionPolicy_: The value for the <code>versionpolicy</code> directive, wrapped in an <code>Option</code>. Defaults to <code>None</code>, i.e. no version policy is defined.
* _bndNoUses_: Should the <code>nouses</code> directive be applied? Defaults to <code>false</code>.
* _bndFileName_: The file name as part of <code>bndOutput</code>. Defaults to this project's <code>defaultJarName</code>. <b>Attention</b>: Better not change this, but the SBT default property <code>artifactBaseName</code>!
* _bndOutput_: The output path used by BND. Defaults to the <code>outputPath</code> of this project plus the value of <code>bndFileName</code>. <b>Attention</b>: Better not change this, but the appropriate SBT default properties!
* _bndManifestOutput_: The output path used by BND for generating the manifest file. Defaults to <code>"META-INF" / "MANIFEST.MF"</code>.
* _bndClasspath_: The classpath used by BND. Defaults to the <code>projectClasspath(Compile)</code> plus <code>providedClasspath</code> of this project. <b>Attention</b>: Don't mistake this for the Bundle-Classpath!

In a very simple setup you will only change the packages to be exported, e.g.:

<pre>
class MyProject(info: ProjectInfo) extends DefaultProject(info) with BNDPlugin
  override def bndExportPackage = Seq("test;version=\"1.3\"")
}
</pre>
